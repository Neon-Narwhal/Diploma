# complexity_analyzer/tools_info.py
"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞.
"""

TOOLS_INFO = {
    'radon': {
        'name': 'Radon',
        'description': 'Cyclomatic Complexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä',
        'metrics': ['Cyclomatic Complexity', 'Maintainability Index', 'Halstead metrics'],
        'install': 'pip install radon',
        'api_available': True,
        'url': 'https://radon.readthedocs.io/'
    },
    'lizard': {
        'name': 'Lizard',
        'description': '–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞',
        'metrics': ['Cyclomatic Complexity', 'NLOC', 'Token Count', 'Parameter Count'],
        'install': 'pip install lizard',
        'api_available': True,
        'url': 'https://github.com/terryyin/lizard'
    },
    'mccabe': {
        'name': 'McCabe',
        'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π McCabe Cyclomatic Complexity',
        'metrics': ['Cyclomatic Complexity'],
        'install': 'pip install mccabe',
        'api_available': True,
        'url': 'https://github.com/PyCQA/mccabe'
    },
    'complexipy': {
        'name': 'Complexipy',
        'description': '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Rust)',
        'metrics': ['Cognitive Complexity'],
        'install': 'pip install complexipy',
        'api_available': True,
        'url': 'https://github.com/rohaquinlop/complexipy'
    },
    'halstead': {
        'name': 'Halstead Metrics',
        'description': '–ò–∑–º–µ—Ä—è–µ—Ç "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–∏–µ" –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
        'metrics': ['Vocabulary', 'Volume', 'Difficulty', 'Effort', 'Time', 'Bugs'],
        'install': 'pip install multimetric',
        'api_available': True,
        'url': 'https://pypi.org/project/multimetric/'
    },
    'mi': {
        'name': 'Maintainability Index',
        'description': '–ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ maintainability (0-100)',
        'metrics': ['MI Score', 'MI Rank'],
        'install': 'pip install radon',
        'api_available': True,
        'url': 'https://radon.readthedocs.io/'
    },
    'nbd': {
        'name': 'Nested Block Depth',
        'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤',
        'metrics': ['Max Depth'],
        'install': 'Built-in (uses AST)',
        'api_available': True,
        'url': 'https://docs.python.org/3/library/ast.html'
    }
}


def print_tools_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"""
    print("="*80)
    print("–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("="*80)
    
    for tool_id, info in TOOLS_INFO.items():
        print(f"\nüì¶ {info['name']} ({tool_id})")
        print(f"   {info['description']}")
        print(f"   –ú–µ—Ç—Ä–∏–∫–∏: {', '.join(info['metrics'])}")
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞: {info['install']}")
        print(f"   Python API: {'‚úÖ' if info['api_available'] else '‚ùå'}")
        print(f"   URL: {info['url']}")
        if 'note' in info:
            print(f"   ‚ö†Ô∏è  {info['note']}")
    
    print("\n" + "="*80)


if __name__ == '__main__':
    print_tools_info()
